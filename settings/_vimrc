"set nocompatible
source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin

" Alt-Space is System menu
if has("gui")
  noremap <M-Space> :simalt ~<CR>
  inoremap <M-Space> <C-O>:simalt ~<CR>
  cnoremap <M-Space> <C-C>:simalt ~<CR>

  set guifont=Consolas:h11 " set font to Consolas, height 11
endif

" use quickfix window as cscope's output window
:set cscopequickfix=s-,g-,d-,c-,t-,e-,f-,i-

:set grepprg=grep\ -nrIE
nnoremap \gp :grep --include=* 

nnoremap <C-W>t :tabnew<CR> 
nnoremap \cn :cnext<CR> 
nnoremap \cp :cprevious<CR> 
" tcsh-style editing keys
:cnoremap <C-A> <Home>
:cnoremap <C-F> <Right>
:cnoremap <C-B> <Left>

syntax on
set nocompatible
let g:html_use_css = 0
set nu
set ic
colo darkblue
set nobackup
set smartindent
set autoindent
"autocmd FileType c,cpp,h,asp,html set shiftwidth=4 | set tabstop=4 | set expandtab  
set guioptions-=T " hide toolbar
set shiftwidth=4 " set auto indent width to 4 when switch lines
set tabstop=4 " set indent width to 4
set expandtab " use spaces instead of tab 
set guioptions-=b " remove scrollbars from gui
set guioptions-=B " remove scrollbars from gui
set guioptions-=l " remove scrollbars from gui
set guioptions-=L " remove scrollbars from gui
set guioptions-=r " remove scrollbars from gui
set guioptions-=R " remove scrollbars from gui

au GUIEnter * simalt ~x " start gvim in maximazed mode

autocmd BufNewFile makefile 0r $VIMRUNTIME/../vimfiles/skeleton/makefile.skel
autocmd BufNewFile Android.mk 0r $VIMRUNTIME/../vimfiles/skeleton/Android.mk.skel
autocmd BufNewFile *.tex    0r $VIMRUNTIME/../vimfiles/skeleton/tex.skel
autocmd BufNewFile *.py     0r $VIMRUNTIME/../vimfiles/skeleton/py.skel
autocmd BufNewFile *.pyw     0r $VIMRUNTIME/../vimfiles/skeleton/py.skel

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

" start fuzzyfinder mapping 
nmap \ff :FufFile<CR>
nmap \fb :FufBuffer<CR>
nmap \fd :FufDir<CR>
nmap \fma :FufBookmarkFileAdd<CR>
nmap \fmf :FufBookmarkFile<CR>
nmap \fmd :FufBookmarkDir<CR>
"nmap \fc :FufMruCmd<CR>
nmap \ft :FufTag<CR>
nmap \fj :FufJumpList<CR>
nmap \fq :FufQuickfix<CR>
nmap \fl :FufLine<CR>
nmap \fh :FufHelp<CR>
"let g:fuf_keyOpenTabpage = '<C-CR>'
let g:fuf_maxMenuWidth = 160
" end fuzzyfind mapping
